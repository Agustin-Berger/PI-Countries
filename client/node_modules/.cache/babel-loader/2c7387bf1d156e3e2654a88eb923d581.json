{"ast":null,"code":"import { ALLCOUNTRIES, COUNTRY_ID, CREAR_ACTIVIDAD, ORDEN_AZ, BACK, ORDEN_POBLACION, ACTIVIDADES, FILTRO_ACTIVIDAD, FILTRO_CONTINENTE, backup } from \"./accion\";\nconst initialState = {\n  countries: [],\n  countryId: [],\n  backup: [],\n  actividades: []\n};\n\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ALLCOUNTRIES:\n      {\n        console.log(action.payload, \"este es el estado\");\n        return { ...state,\n          countries: action.payload\n        };\n      }\n\n    case BACK:\n      {\n        return { ...state,\n          backup: action.payload,\n          countries: action.payload\n        };\n      }\n\n    case ACTIVIDADES:\n      {\n        return { ...state,\n          actividades: action.payload\n        };\n      }\n\n    case COUNTRY_ID:\n      {\n        console.log(action.payload, \"payloaaad\");\n        let leti = action.payload;\n        if (leti.onu === true) leti.onu = \"Pertenece\";else leti.onu = \"No Pertenece\";\n        if (leti.activities.length < 1) leti.activities = false;\n        return { ...state,\n          countryId: leti\n        };\n      }\n\n    case CREAR_ACTIVIDAD:\n      {\n        return { ...state\n        };\n      }\n\n    case ORDEN_AZ:\n      {\n        const ordenado = action.payload;\n        let estado = state.countries;\n        let ordenados;\n\n        if (ordenado === \"Aleatorio\") {\n          return { ...state,\n            countries: state.countries\n          };\n        }\n\n        if (ordenado === \"A-Z\") {\n          ordenados = estado.sort((a, b) => {\n            if (a.name < b.name) return -1;\n            if (a.name > b.name) return 1;\n            return 0;\n          });\n        }\n\n        if (ordenado === \"Z-A\") {\n          ordenados = estado.sort((a, b) => {\n            if (a.name > b.name) return -1;\n            if (a.name < b.name) return 1;\n            return 0;\n          });\n        }\n\n        return { ...state,\n          countries: ordenados\n        };\n      }\n\n    case ORDEN_POBLACION:\n      {\n        const poblacion = state.countries;\n        const valuePoblacion = action.payload;\n        let ordenados;\n\n        if (valuePoblacion === \"Menor Poblacion\") {\n          ordenados = poblacion.sort((a, b) => {\n            if (a.poblacion < b.poblacion) return -1;\n            if (a.poblacion > b.poblacion) return 1;\n            return 0;\n          });\n        }\n\n        if (valuePoblacion === \"Mayor Poblacion\") {\n          ordenados = poblacion.sort((a, b) => {\n            if (a.poblacion > b.poblacion) return -1;\n            if (a.poblacion < b.poblacion) return 1;\n            return 0;\n          });\n        }\n\n        return { ...state,\n          countries: ordenados\n        };\n      }\n\n    case FILTRO_ACTIVIDAD:\n      {\n        const actividad = action.payload;\n        let paises = state.countries; // // if (actividad === \"Actividades\") {\n        // //   return { ...state, countries: state.backup };\n        // }\n\n        if (actividad !== \"Ninguna\") {\n          paises = paises.filter(e => {\n            const act = e.activities.filter(e => {\n              return e.nombre === actividad;\n            });\n            return act.length ? actividad : false;\n          });\n          console.log(paises, \"solo el estado\");\n        }\n\n        return { ...state,\n          countries: paises\n        };\n      }\n\n    case FILTRO_CONTINENTE:\n      {\n        let value = action.payload;\n        let estado = state.backup;\n\n        if (value !== \"Todos\") {\n          estado = estado.filter(e => e.continente.includes(value));\n          return { ...state,\n            countries: estado\n          };\n        }\n\n        return { ...state,\n          countries: state.countries\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"names":["ALLCOUNTRIES","COUNTRY_ID","CREAR_ACTIVIDAD","ORDEN_AZ","BACK","ORDEN_POBLACION","ACTIVIDADES","FILTRO_ACTIVIDAD","FILTRO_CONTINENTE","backup","initialState","countries","countryId","actividades","rootReducer","state","action","type","console","log","payload","leti","onu","activities","length","ordenado","estado","ordenados","sort","a","b","name","poblacion","valuePoblacion","actividad","paises","filter","e","act","nombre","value","continente","includes"],"sources":["C:/Users/zoo_c/Desktop/Aca se ven donde las papas queman/PI-Countries-main/client/src/redux/reducer.js"],"sourcesContent":["import {\r\n  ALLCOUNTRIES,\r\n  COUNTRY_ID,\r\n  CREAR_ACTIVIDAD,\r\n  ORDEN_AZ,\r\n  BACK,\r\n  ORDEN_POBLACION,\r\n  ACTIVIDADES,\r\n  FILTRO_ACTIVIDAD,\r\n  FILTRO_CONTINENTE,\r\n  backup,\r\n} from \"./accion\";\r\nconst initialState = {\r\n  countries: [],\r\n  countryId: [],\r\n  backup: [],\r\n  actividades: [],\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ALLCOUNTRIES: {\r\n      console.log(action.payload, \"este es el estado\");\r\n      return {\r\n        ...state,\r\n        countries: action.payload,\r\n      };\r\n    }\r\n    case BACK: {\r\n      return {\r\n        ...state,\r\n\r\n        backup: action.payload,\r\n        countries: action.payload,\r\n      };\r\n    }\r\n\r\n    case ACTIVIDADES: {\r\n      return {\r\n        ...state,\r\n        actividades: action.payload,\r\n      };\r\n    }\r\n\r\n    case COUNTRY_ID: {\r\n      console.log(action.payload, \"payloaaad\");\r\n      let leti = action.payload;\r\n      if (leti.onu === true) leti.onu = \"Pertenece\";\r\n      else leti.onu = \"No Pertenece\";\r\n      if (leti.activities.length < 1) leti.activities = false;\r\n      return {\r\n        ...state,\r\n        countryId: leti,\r\n      };\r\n    }\r\n    case CREAR_ACTIVIDAD: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case ORDEN_AZ: {\r\n      const ordenado = action.payload;\r\n      let estado = state.countries;\r\n      let ordenados;\r\n      if (ordenado === \"Aleatorio\") {\r\n        return { ...state, countries: state.countries };\r\n      }\r\n      if (ordenado === \"A-Z\") {\r\n        ordenados = estado.sort((a, b) => {\r\n          if (a.name < b.name) return -1;\r\n          if (a.name > b.name) return 1;\r\n          return 0;\r\n        });\r\n      }\r\n      if (ordenado === \"Z-A\") {\r\n        ordenados = estado.sort((a, b) => {\r\n          if (a.name > b.name) return -1;\r\n          if (a.name < b.name) return 1;\r\n          return 0;\r\n        });\r\n      }\r\n      return {\r\n        ...state,\r\n        countries: ordenados,\r\n      };\r\n    }\r\n    case ORDEN_POBLACION: {\r\n      const poblacion = state.countries;\r\n      const valuePoblacion = action.payload;\r\n      let ordenados;\r\n      if (valuePoblacion === \"Menor Poblacion\") {\r\n        ordenados = poblacion.sort((a, b) => {\r\n          if (a.poblacion < b.poblacion) return -1;\r\n          if (a.poblacion > b.poblacion) return 1;\r\n          return 0;\r\n        });\r\n      }\r\n      if (valuePoblacion === \"Mayor Poblacion\") {\r\n        ordenados = poblacion.sort((a, b) => {\r\n          if (a.poblacion > b.poblacion) return -1;\r\n          if (a.poblacion < b.poblacion) return 1;\r\n          return 0;\r\n        });\r\n      }\r\n      return {\r\n        ...state,\r\n        countries: ordenados,\r\n      };\r\n    }\r\n\r\n    case FILTRO_ACTIVIDAD: {\r\n      const actividad = action.payload;\r\n      let paises = state.countries;\r\n\r\n      // // if (actividad === \"Actividades\") {\r\n      // //   return { ...state, countries: state.backup };\r\n      // }\r\n      if (actividad !== \"Ninguna\") {\r\n        paises = paises.filter((e) => {\r\n          const act = e.activities.filter((e) => {\r\n            return e.nombre === actividad;\r\n          });\r\n          return act.length ? actividad : false;\r\n        });\r\n        console.log(paises, \"solo el estado\");\r\n      }\r\n      return { ...state, countries: paises };\r\n    }\r\n\r\n    case FILTRO_CONTINENTE: {\r\n      let value = action.payload;\r\n      let estado = state.backup;\r\n      if (value !== \"Todos\") {\r\n        estado = estado.filter((e) => e.continente.includes(value));\r\n        return { ...state, countries: estado };\r\n      }\r\n      return {\r\n        ...state,\r\n        countries: state.countries,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default rootReducer;\r\n"],"mappings":"AAAA,SACEA,YADF,EAEEC,UAFF,EAGEC,eAHF,EAIEC,QAJF,EAKEC,IALF,EAMEC,eANF,EAOEC,WAPF,EAQEC,gBARF,EASEC,iBATF,EAUEC,MAVF,QAWO,UAXP;AAYA,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,EADQ;EAEnBC,SAAS,EAAE,EAFQ;EAGnBH,MAAM,EAAE,EAHW;EAInBI,WAAW,EAAE;AAJM,CAArB;;AAOA,MAAMC,WAAW,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBL,YAAyB;EAAA,IAAXM,MAAW;;EACpD,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKjB,YAAL;MAAmB;QACjBkB,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB,EAA4B,mBAA5B;QACA,OAAO,EACL,GAAGL,KADE;UAELJ,SAAS,EAAEK,MAAM,CAACI;QAFb,CAAP;MAID;;IACD,KAAKhB,IAAL;MAAW;QACT,OAAO,EACL,GAAGW,KADE;UAGLN,MAAM,EAAEO,MAAM,CAACI,OAHV;UAILT,SAAS,EAAEK,MAAM,CAACI;QAJb,CAAP;MAMD;;IAED,KAAKd,WAAL;MAAkB;QAChB,OAAO,EACL,GAAGS,KADE;UAELF,WAAW,EAAEG,MAAM,CAACI;QAFf,CAAP;MAID;;IAED,KAAKnB,UAAL;MAAiB;QACfiB,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB,EAA4B,WAA5B;QACA,IAAIC,IAAI,GAAGL,MAAM,CAACI,OAAlB;QACA,IAAIC,IAAI,CAACC,GAAL,KAAa,IAAjB,EAAuBD,IAAI,CAACC,GAAL,GAAW,WAAX,CAAvB,KACKD,IAAI,CAACC,GAAL,GAAW,cAAX;QACL,IAAID,IAAI,CAACE,UAAL,CAAgBC,MAAhB,GAAyB,CAA7B,EAAgCH,IAAI,CAACE,UAAL,GAAkB,KAAlB;QAChC,OAAO,EACL,GAAGR,KADE;UAELH,SAAS,EAAES;QAFN,CAAP;MAID;;IACD,KAAKnB,eAAL;MAAsB;QACpB,OAAO,EACL,GAAGa;QADE,CAAP;MAGD;;IACD,KAAKZ,QAAL;MAAe;QACb,MAAMsB,QAAQ,GAAGT,MAAM,CAACI,OAAxB;QACA,IAAIM,MAAM,GAAGX,KAAK,CAACJ,SAAnB;QACA,IAAIgB,SAAJ;;QACA,IAAIF,QAAQ,KAAK,WAAjB,EAA8B;UAC5B,OAAO,EAAE,GAAGV,KAAL;YAAYJ,SAAS,EAAEI,KAAK,CAACJ;UAA7B,CAAP;QACD;;QACD,IAAIc,QAAQ,KAAK,KAAjB,EAAwB;UACtBE,SAAS,GAAGD,MAAM,CAACE,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;YAChC,IAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB,OAAO,CAAC,CAAR;YACrB,IAAIF,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB,OAAO,CAAP;YACrB,OAAO,CAAP;UACD,CAJW,CAAZ;QAKD;;QACD,IAAIN,QAAQ,KAAK,KAAjB,EAAwB;UACtBE,SAAS,GAAGD,MAAM,CAACE,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;YAChC,IAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB,OAAO,CAAC,CAAR;YACrB,IAAIF,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB,OAAO,CAAP;YACrB,OAAO,CAAP;UACD,CAJW,CAAZ;QAKD;;QACD,OAAO,EACL,GAAGhB,KADE;UAELJ,SAAS,EAAEgB;QAFN,CAAP;MAID;;IACD,KAAKtB,eAAL;MAAsB;QACpB,MAAM2B,SAAS,GAAGjB,KAAK,CAACJ,SAAxB;QACA,MAAMsB,cAAc,GAAGjB,MAAM,CAACI,OAA9B;QACA,IAAIO,SAAJ;;QACA,IAAIM,cAAc,KAAK,iBAAvB,EAA0C;UACxCN,SAAS,GAAGK,SAAS,CAACJ,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAU;YACnC,IAAID,CAAC,CAACG,SAAF,GAAcF,CAAC,CAACE,SAApB,EAA+B,OAAO,CAAC,CAAR;YAC/B,IAAIH,CAAC,CAACG,SAAF,GAAcF,CAAC,CAACE,SAApB,EAA+B,OAAO,CAAP;YAC/B,OAAO,CAAP;UACD,CAJW,CAAZ;QAKD;;QACD,IAAIC,cAAc,KAAK,iBAAvB,EAA0C;UACxCN,SAAS,GAAGK,SAAS,CAACJ,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAU;YACnC,IAAID,CAAC,CAACG,SAAF,GAAcF,CAAC,CAACE,SAApB,EAA+B,OAAO,CAAC,CAAR;YAC/B,IAAIH,CAAC,CAACG,SAAF,GAAcF,CAAC,CAACE,SAApB,EAA+B,OAAO,CAAP;YAC/B,OAAO,CAAP;UACD,CAJW,CAAZ;QAKD;;QACD,OAAO,EACL,GAAGjB,KADE;UAELJ,SAAS,EAAEgB;QAFN,CAAP;MAID;;IAED,KAAKpB,gBAAL;MAAuB;QACrB,MAAM2B,SAAS,GAAGlB,MAAM,CAACI,OAAzB;QACA,IAAIe,MAAM,GAAGpB,KAAK,CAACJ,SAAnB,CAFqB,CAIrB;QACA;QACA;;QACA,IAAIuB,SAAS,KAAK,SAAlB,EAA6B;UAC3BC,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAeC,CAAD,IAAO;YAC5B,MAAMC,GAAG,GAAGD,CAAC,CAACd,UAAF,CAAaa,MAAb,CAAqBC,CAAD,IAAO;cACrC,OAAOA,CAAC,CAACE,MAAF,KAAaL,SAApB;YACD,CAFW,CAAZ;YAGA,OAAOI,GAAG,CAACd,MAAJ,GAAaU,SAAb,GAAyB,KAAhC;UACD,CALQ,CAAT;UAMAhB,OAAO,CAACC,GAAR,CAAYgB,MAAZ,EAAoB,gBAApB;QACD;;QACD,OAAO,EAAE,GAAGpB,KAAL;UAAYJ,SAAS,EAAEwB;QAAvB,CAAP;MACD;;IAED,KAAK3B,iBAAL;MAAwB;QACtB,IAAIgC,KAAK,GAAGxB,MAAM,CAACI,OAAnB;QACA,IAAIM,MAAM,GAAGX,KAAK,CAACN,MAAnB;;QACA,IAAI+B,KAAK,KAAK,OAAd,EAAuB;UACrBd,MAAM,GAAGA,MAAM,CAACU,MAAP,CAAeC,CAAD,IAAOA,CAAC,CAACI,UAAF,CAAaC,QAAb,CAAsBF,KAAtB,CAArB,CAAT;UACA,OAAO,EAAE,GAAGzB,KAAL;YAAYJ,SAAS,EAAEe;UAAvB,CAAP;QACD;;QACD,OAAO,EACL,GAAGX,KADE;UAELJ,SAAS,EAAEI,KAAK,CAACJ;QAFZ,CAAP;MAID;;IAED;MACE,OAAOI,KAAP;EA3HJ;AA6HD,CA9HD;;AA+HA,eAAeD,WAAf"},"metadata":{},"sourceType":"module"}